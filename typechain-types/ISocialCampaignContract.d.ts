/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISocialCampaignContractInterface extends ethers.utils.Interface {
  functions: {
    "countCampaigns()": FunctionFragment;
    "countCampaignsFor(address)": FunctionFragment;
    "countParticipationsFor(address)": FunctionFragment;
    "countParticipationsForCampaign(uint256)": FunctionFragment;
    "getCampaignsById(uint256)": FunctionFragment;
    "getCampaignsByIndex(uint256)": FunctionFragment;
    "getMyCampaignsByIndex(address,uint256)": FunctionFragment;
    "getParticipationsById(uint256)": FunctionFragment;
    "getParticipationsCampaignFor(uint256,uint256)": FunctionFragment;
    "getParticipationsFor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "countCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countCampaignsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countParticipationsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countParticipationsForCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyCampaignsByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipationsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipationsCampaignFor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipationsFor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "countCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countCampaignsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countParticipationsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countParticipationsForCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyCampaignsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipationsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipationsCampaignFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipationsFor",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISocialCampaignContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISocialCampaignContractInterface;

  functions: {
    countCampaigns(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countCampaigns()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countCampaignsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countCampaignsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countParticipationsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countParticipationsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countParticipationsForCampaign(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countParticipationsForCampaign(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCampaignsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    "getCampaignsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    getCampaignsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    "getCampaignsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    getMyCampaignsByIndex(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    "getMyCampaignsByIndex(address,uint256)"(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    getParticipationsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      };
    }>;

    "getParticipationsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      };
    }>;

    "getParticipationsCampaignFor(uint256,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      };
    }>;

    "getParticipationsCampaignFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      };
    }>;

    getParticipationsFor(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      };
    }>;

    "getParticipationsFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      };
    }>;
  };

  countCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

  "countCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

  countCampaignsFor(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countCampaignsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countParticipationsFor(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countParticipationsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countParticipationsForCampaign(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countParticipationsForCampaign(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaignsById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  "getCampaignsById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  getCampaignsByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  "getCampaignsByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  getMyCampaignsByIndex(
    myaddrr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  "getMyCampaignsByIndex(address,uint256)"(
    myaddrr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  getParticipationsById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  "getParticipationsById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  "getParticipationsCampaignFor(uint256,uint256)"(
    campaignId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  "getParticipationsCampaignFor(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    uri: string;
    actions: BigNumber[];
    price: BigNumber;
    priceCurrency: string;
    startat: BigNumber;
    endat: BigNumber;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    balance: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    pubKey: string;
    name: string;
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber[];
    4: BigNumber;
    5: string;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: {
      current: BigNumber;
      accBalance: BigNumber;
      pendingBalance: BigNumber;
      description: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    };
    12: string;
    13: string;
    14: number;
  }>;

  getParticipationsFor(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  "getParticipationsFor(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  callStatic: {
    countCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    "countCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

    countCampaignsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countCampaignsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countParticipationsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countParticipationsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countParticipationsForCampaign(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countParticipationsForCampaign(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    "getCampaignsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    getCampaignsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    "getCampaignsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    getMyCampaignsByIndex(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    "getMyCampaignsByIndex(address,uint256)"(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    getParticipationsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "getParticipationsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "getParticipationsCampaignFor(uint256,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "getParticipationsCampaignFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }>;

    getParticipationsFor(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "getParticipationsFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    countCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    "countCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

    countCampaignsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countCampaignsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countParticipationsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countParticipationsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countParticipationsForCampaign(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countParticipationsForCampaign(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCampaignsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCampaignsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyCampaignsByIndex(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyCampaignsByIndex(address,uint256)"(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipationsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipationsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipationsCampaignFor(uint256,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipationsCampaignFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipationsFor(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipationsFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    countCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countCampaigns()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countCampaignsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countCampaignsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countParticipationsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countParticipationsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countParticipationsForCampaign(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countParticipationsForCampaign(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCampaignsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCampaignsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyCampaignsByIndex(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyCampaignsByIndex(address,uint256)"(
      myaddrr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipationsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipationsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipationsCampaignFor(uint256,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipationsCampaignFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipationsFor(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipationsFor(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
