/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UtilsInterface extends ethers.utils.Interface {
  functions: {
    "checkSignature(bool,address,bytes,bytes)": FunctionFragment;
    "containsAddress(address[],address)": FunctionFragment;
    "containsUint(uint256[],uint256)": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "memcmp(bytes,bytes)": FunctionFragment;
    "strcmp(string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [boolean, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "containsAddress",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "containsUint",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memcmp",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strcmp",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memcmp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strcmp", data: BytesLike): Result;

  events: {};
}

export class Utils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UtilsInterface;

  functions: {
    checkSignature(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "checkSignature(bool,address,bytes,bytes)"(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    containsAddress(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "containsAddress(address[],address)"(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    containsUint(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "containsUint(uint256[],uint256)"(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    memcmp(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "memcmp(bytes,bytes)"(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    strcmp(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "strcmp(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  checkSignature(
    validatorRequire: boolean,
    validator: string,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkSignature(bool,address,bytes,bytes)"(
    validatorRequire: boolean,
    validator: string,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  containsAddress(
    values: string[],
    value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "containsAddress(address[],address)"(
    values: string[],
    value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  containsUint(
    values: BigNumberish[],
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "containsUint(uint256[],uint256)"(
    values: BigNumberish[],
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  memcmp(
    a: BytesLike,
    b: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "memcmp(bytes,bytes)"(
    a: BytesLike,
    b: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  strcmp(a: string, b: string, overrides?: CallOverrides): Promise<boolean>;

  "strcmp(string,string)"(
    a: string,
    b: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkSignature(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkSignature(bool,address,bytes,bytes)"(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    containsAddress(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "containsAddress(address[],address)"(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    containsUint(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "containsUint(uint256[],uint256)"(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    memcmp(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memcmp(bytes,bytes)"(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    strcmp(a: string, b: string, overrides?: CallOverrides): Promise<boolean>;

    "strcmp(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkSignature(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignature(bool,address,bytes,bytes)"(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    containsAddress(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "containsAddress(address[],address)"(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    containsUint(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "containsUint(uint256[],uint256)"(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memcmp(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memcmp(bytes,bytes)"(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strcmp(a: string, b: string, overrides?: CallOverrides): Promise<BigNumber>;

    "strcmp(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSignature(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignature(bool,address,bytes,bytes)"(
      validatorRequire: boolean,
      validator: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    containsAddress(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "containsAddress(address[],address)"(
      values: string[],
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    containsUint(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "containsUint(uint256[],uint256)"(
      values: BigNumberish[],
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memcmp(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memcmp(bytes,bytes)"(
      a: BytesLike,
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strcmp(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strcmp(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
