/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MessageContractInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "sendMessage(bytes32,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      BytesLike,
      {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export class MessageContractInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MessageContractInterfaceInterface;

  functions: {
    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  sendMessage(
    subjectId: BytesLike,
    message: {
      id: BigNumberish;
      subjectId: BytesLike;
      senderPubKey: BytesLike;
      receiverPubKey: BytesLike;
      encryptMessage: BytesLike;
      myEncryptMessage: BytesLike;
      sender: BytesLike;
      receiver: BytesLike;
      date: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
    subjectId: BytesLike,
    message: {
      id: BigNumberish;
      subjectId: BytesLike;
      senderPubKey: BytesLike;
      receiverPubKey: BytesLike;
      encryptMessage: BytesLike;
      myEncryptMessage: BytesLike;
      sender: BytesLike;
      receiver: BytesLike;
      date: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
