/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SocialAdsContractInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "adsIds(uint256)": FunctionFragment;
    "allowClaimProposition(uint256,bool)": FunctionFragment;
    "approveProposition(uint256,bool)": FunctionFragment;
    "balanceCoin()": FunctionFragment;
    "balanceToken(address)": FunctionFragment;
    "claimProposition(uint256)": FunctionFragment;
    "countAds()": FunctionFragment;
    "countAdsFor(address)": FunctionFragment;
    "countPropositionsFor(address)": FunctionFragment;
    "countPropositionsForAds(uint256)": FunctionFragment;
    "createAds(tuple)": FunctionFragment;
    "createProposition(tuple)": FunctionFragment;
    "deleteAd(uint256)": FunctionFragment;
    "deleteAds(uint256)": FunctionFragment;
    "deleteProposition(uint256)": FunctionFragment;
    "getAdsById(uint256)": FunctionFragment;
    "getAdsByIndex(uint256)": FunctionFragment;
    "getAdsByIndexAndAddress(address,uint256)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getPropositionById(uint256)": FunctionFragment;
    "getPropositionByIndexAndAddress(address,uint256)": FunctionFragment;
    "getPropositionByIndexAndAdsId(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockCount()": FunctionFragment;
    "locked(bytes32)": FunctionFragment;
    "myAds(address,uint256)": FunctionFragment;
    "myPropositions(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pricing(bytes32)": FunctionFragment;
    "propositionsByAds(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "socialConfig()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockPayment(bytes32,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAds(uint256,tuple)": FunctionFragment;
    "updateProposition(tuple)": FunctionFragment;
    "withdrawCoin()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adsIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowClaimProposition",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveProposition",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProposition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "countAds", values?: undefined): string;
  encodeFunctionData(functionFragment: "countAdsFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "countPropositionsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countPropositionsForAds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAds",
    values: [
      {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposition",
    values: [
      {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProposition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsByIndexAndAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPropositionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositionByIndexAndAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositionByIndexAndAdsId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "myAds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myPropositions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pricing", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "propositionsByAds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "socialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAds",
    values: [
      BigNumberish,
      {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposition",
    values: [
      {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adsIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowClaimProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countAdsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPropositionsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPropositionsForAds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteAd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdsById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdsByIndexAndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionByIndexAndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionByIndexAndAdsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myPropositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pricing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propositionsByAds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OnAds(address,tuple)": EventFragment;
    "OnDeleteAds(address,tuple)": EventFragment;
    "OnDeleteProposition(address,tuple)": EventFragment;
    "OnProposition(address,tuple)": EventFragment;
    "OnPropositionAllow(address,tuple,bool)": EventFragment;
    "OnPropositionApprove(address,tuple,bool)": EventFragment;
    "OnPropositionClaim(address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnAds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnDeleteAds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnDeleteProposition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnProposition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPropositionAllow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPropositionApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPropositionClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class SocialAdsContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SocialAdsContractInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    adsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "adsIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowClaimProposition(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowClaimProposition(uint256,bool)"(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveProposition(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveProposition(uint256,bool)"(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimProposition(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimProposition(uint256)"(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    countAds(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countAds()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countAdsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    createAds(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAds((uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deleteAd(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteAd(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteAds(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteAds(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteProposition(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteProposition(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        paused: number;
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: number;
        14: BigNumber;
        15: BigNumber;
      };
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    myAds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "myAds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    myPropositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "myPropositions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    propositionsByAds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "propositionsByAds(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8)))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        0: string;
        1: boolean;
        2: string;
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
      };
    }>;

    "socialConfig()"(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        0: string;
        1: boolean;
        2: string;
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
      };
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateAds(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAds(uint256,(uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "updateProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  adsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "adsIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowClaimProposition(
    propositionId: BigNumberish,
    canClaim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowClaimProposition(uint256,bool)"(
    propositionId: BigNumberish,
    canClaim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveProposition(
    propositionId: BigNumberish,
    approve: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveProposition(uint256,bool)"(
    propositionId: BigNumberish,
    approve: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimProposition(
    propositionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimProposition(uint256)"(
    propositionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  countAds(overrides?: CallOverrides): Promise<BigNumber>;

  "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

  countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "countAdsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPropositionsFor(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countPropositionsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPropositionsForAds(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countPropositionsForAds(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createAds(
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: BytesLike;
      description: BytesLike;
      audiences: BytesLike[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      paused: BigNumberish;
      countProposition: BigNumberish;
      countPropositionAccepted: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAds((uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: BytesLike;
      description: BytesLike;
      audiences: BytesLike[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      paused: BigNumberish;
      countProposition: BigNumberish;
      countPropositionAccepted: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createProposition(
    proposition: {
      id: BigNumberish;
      adsId: BigNumberish;
      startat: BigNumberish;
      endat: BigNumberish;
      amount: BigNumberish;
      currency: string;
      owner: string;
      accepted: BigNumberish;
      canClaim: BigNumberish;
      claimed: boolean;
      description: BytesLike;
      pubKey: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
    proposition: {
      id: BigNumberish;
      adsId: BigNumberish;
      startat: BigNumberish;
      endat: BigNumberish;
      amount: BigNumberish;
      currency: string;
      owner: string;
      accepted: BigNumberish;
      canClaim: BigNumberish;
      claimed: boolean;
      description: BytesLike;
      pubKey: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deleteAd(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteAd(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteAds(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteAds(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteProposition(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteProposition(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdsById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  "getAdsById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  getAdsByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  "getAdsByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  getAdsByIndexAndAddress(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  "getAdsByIndexAndAddress(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    paused: number;
    countProposition: BigNumber;
    countPropositionAccepted: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: number;
    14: BigNumber;
    15: BigNumber;
  }>;

  getPrice(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "getPrice(bytes32)"(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  getPropositionById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  getPropositionByIndexAndAddress(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionByIndexAndAddress(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  getPropositionByIndexAndAdsId(
    adsid: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionByIndexAndAdsId(uint256,uint256)"(
    adsid: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  "locked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  myAds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "myAds(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myPropositions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "myPropositions(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "pricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  propositionsByAds(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "propositionsByAds(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      ads: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((address,bool,address,(uint256,bytes32,address,uint8)))"(
    config: {
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      ads: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialConfig(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    validatorRequire: boolean;
    validator: string;
    ads: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    0: string;
    1: boolean;
    2: string;
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
  }>;

  "socialConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    validatorRequire: boolean;
    validator: string;
    ads: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    0: string;
    1: boolean;
    2: string;
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensReceived(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockPayment(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockPayment(bytes32,uint256,address)"(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateAds(
    id: BigNumberish,
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: BytesLike;
      description: BytesLike;
      audiences: BytesLike[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      paused: BigNumberish;
      countProposition: BigNumberish;
      countPropositionAccepted: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAds(uint256,(uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
    id: BigNumberish,
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: BytesLike;
      description: BytesLike;
      audiences: BytesLike[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      paused: BigNumberish;
      countProposition: BigNumberish;
      countPropositionAccepted: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateProposition(
    proposition: {
      id: BigNumberish;
      adsId: BigNumberish;
      startat: BigNumberish;
      endat: BigNumberish;
      amount: BigNumberish;
      currency: string;
      owner: string;
      accepted: BigNumberish;
      canClaim: BigNumberish;
      claimed: boolean;
      description: BytesLike;
      pubKey: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "updateProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
    proposition: {
      id: BigNumberish;
      adsId: BigNumberish;
      startat: BigNumberish;
      endat: BigNumberish;
      amount: BigNumberish;
      currency: string;
      owner: string;
      accepted: BigNumberish;
      canClaim: BigNumberish;
      claimed: boolean;
      description: BytesLike;
      pubKey: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    adsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "adsIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowClaimProposition(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowClaimProposition(uint256,bool)"(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approveProposition(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveProposition(uint256,bool)"(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimProposition(
      propositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimProposition(uint256)"(
      propositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    countAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAds(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "createAds((uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    createProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "createProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAd(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deleteAd(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAds(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deleteAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteProposition(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteProposition(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      paused: number;
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: number;
      14: BigNumber;
      15: BigNumber;
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    myAds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myAds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myPropositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myPropositions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    "pause()"(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    propositionsByAds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propositionsByAds(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8)))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    socialConfig(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      ads: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      0: string;
      1: boolean;
      2: string;
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "socialConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      ads: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      0: string;
      1: boolean;
      2: string;
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    "unpause()"(overrides?: CallOverrides): Promise<boolean>;

    updateAds(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAds(uint256,(uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "updateProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCoin(overrides?: CallOverrides): Promise<boolean>;

    "withdrawCoin()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OnAds(addr: null, ads: null): EventFilter;

    OnDeleteAds(addr: null, ads: null): EventFilter;

    OnDeleteProposition(addr: null, proposition: null): EventFilter;

    OnProposition(addr: null, proposition: null): EventFilter;

    OnPropositionAllow(
      addr: null,
      proposition: null,
      approve: null
    ): EventFilter;

    OnPropositionApprove(
      addr: null,
      proposition: null,
      approve: null
    ): EventFilter;

    OnPropositionClaim(addr: null, proposition: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    adsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "adsIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowClaimProposition(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allowClaimProposition(uint256,bool)"(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveProposition(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveProposition(uint256,bool)"(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimProposition(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimProposition(uint256)"(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    countAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAds(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAds((uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    createProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deleteAd(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deleteAd(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteAds(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deleteAds(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteProposition(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteProposition(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdsById(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(service: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myAds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myAds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myPropositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myPropositions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricing(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propositionsByAds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propositionsByAds(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8)))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "socialConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateAds(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAds(uint256,(uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "updateProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: Overrides): Promise<BigNumber>;

    "withdrawCoin()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adsIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowClaimProposition(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowClaimProposition(uint256,bool)"(
      propositionId: BigNumberish,
      canClaim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveProposition(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveProposition(uint256,bool)"(
      propositionId: BigNumberish,
      approve: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimProposition(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimProposition(uint256)"(
      propositionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    countAds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countAds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countAdsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAds(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAds((uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deleteAd(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteAd(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteAds(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteAds(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteProposition(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteProposition(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myAds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "myAds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myPropositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "myPropositions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propositionsByAds(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "propositionsByAds(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8)))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        ads: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "socialConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateAds(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAds(uint256,(uint256,uint256,bytes,bytes,bytes[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,uint8,uint256,uint256))"(
      id: BigNumberish,
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: BytesLike;
        description: BytesLike;
        audiences: BytesLike[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        paused: BigNumberish;
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateProposition(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "updateProposition((uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint8,bool,bytes,bytes))"(
      proposition: {
        id: BigNumberish;
        adsId: BigNumberish;
        startat: BigNumberish;
        endat: BigNumberish;
        amount: BigNumberish;
        currency: string;
        owner: string;
        accepted: BigNumberish;
        canClaim: BigNumberish;
        claimed: boolean;
        description: BytesLike;
        pubKey: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
