/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SocialCampaignContractAbstractInterface
  extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "balanceCoin()": FunctionFragment;
    "balanceToken(address)": FunctionFragment;
    "campaignIds(uint256)": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockCount()": FunctionFragment;
    "locked(bytes32)": FunctionFragment;
    "myCampaigns(address,uint256)": FunctionFragment;
    "myParticipations(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "participants(uint256)": FunctionFragment;
    "participantsByCampaign(uint256,uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "pricing(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "socialConfig()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawCoin()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "myCampaigns",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myParticipations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participantsByCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pricing", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "socialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myParticipations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantsByCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pricing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OnAllowClaim(address,tuple)": EventFragment;
    "OnCampaign(address,tuple)": EventFragment;
    "OnClaim(address,tuple)": EventFragment;
    "OnDeleteCampaign(address,tuple)": EventFragment;
    "OnParticipate(address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnAllowClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnDeleteCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnParticipate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class SocialCampaignContractAbstract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SocialCampaignContractAbstractInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceCoin(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "campaignIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    myCampaigns(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "myCampaigns(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    myParticipations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "myParticipations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    participantsByCampaign(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "participantsByCampaign(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8),address,bool))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        libAddress: string;
        deleteDefinitely: boolean;
        0: string;
        1: boolean;
        2: string;
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        4: string;
        5: boolean;
      };
    }>;

    "socialConfig()"(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        libAddress: string;
        deleteDefinitely: boolean;
        0: string;
        1: boolean;
        2: string;
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        4: string;
        5: boolean;
      };
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  campaignIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "campaignIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "getPrice(bytes32)"(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  "locked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  myCampaigns(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "myCampaigns(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myParticipations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "myParticipations(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  participants(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  "participants(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    user: string;
    handleHash: string;
    handleEncrypt: string;
    date: BigNumber;
    claimed: boolean;
    canClaim: number;
    campaignId: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: boolean;
    6: number;
    7: BigNumber;
  }>;

  participantsByCampaign(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "participantsByCampaign(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "pricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      campaign: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      libAddress: string;
      deleteDefinitely: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((address,bool,address,(uint256,bytes32,address,uint8),address,bool))"(
    config: {
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      campaign: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      libAddress: string;
      deleteDefinitely: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialConfig(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    validatorRequire: boolean;
    validator: string;
    campaign: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    libAddress: string;
    deleteDefinitely: boolean;
    0: string;
    1: boolean;
    2: string;
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    4: string;
    5: boolean;
  }>;

  "socialConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    validatorRequire: boolean;
    validator: string;
    campaign: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    libAddress: string;
    deleteDefinitely: boolean;
    0: string;
    1: boolean;
    2: string;
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    4: string;
    5: boolean;
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensReceived(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "campaignIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    myCampaigns(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myCampaigns(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myParticipations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myParticipations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }>;

    participantsByCampaign(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participantsByCampaign(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8),address,bool))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    socialConfig(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      campaign: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      libAddress: string;
      deleteDefinitely: boolean;
      0: string;
      1: boolean;
      2: string;
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      4: string;
      5: boolean;
    }>;

    "socialConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      validatorRequire: boolean;
      validator: string;
      campaign: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      libAddress: string;
      deleteDefinitely: boolean;
      0: string;
      1: boolean;
      2: string;
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      4: string;
      5: boolean;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCoin(overrides?: CallOverrides): Promise<boolean>;

    "withdrawCoin()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OnAllowClaim(addr: null, participant: null): EventFilter;

    OnCampaign(addr: null, campaign: null): EventFilter;

    OnClaim(addr: null, participant: null): EventFilter;

    OnDeleteCampaign(addr: null, campaign: null): EventFilter;

    OnParticipate(addr: null, participant: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "campaignIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(service: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myCampaigns(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myCampaigns(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myParticipations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myParticipations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participantsByCampaign(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participantsByCampaign(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricing(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8),address,bool))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "socialConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: Overrides): Promise<BigNumber>;

    "withdrawCoin()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "campaignIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myCampaigns(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "myCampaigns(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myParticipations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "myParticipations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participantsByCampaign(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participantsByCampaign(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((address,bool,address,(uint256,bytes32,address,uint8),address,bool))"(
      config: {
        tokenAddress: string;
        validatorRequire: boolean;
        validator: string;
        campaign: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        libAddress: string;
        deleteDefinitely: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "socialConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
