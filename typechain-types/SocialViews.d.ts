/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SocialViewsInterface extends ethers.utils.Interface {
  functions: {
    "addressAds()": FunctionFragment;
    "addressCampaign()": FunctionFragment;
    "countCanClaimParticipationsForCampaign(uint256,uint8)": FunctionFragment;
    "countMyAds()": FunctionFragment;
    "countMyCampaigns()": FunctionFragment;
    "countMyParticipations()": FunctionFragment;
    "countMyPropositions()": FunctionFragment;
    "generateAdsUserData(tuple)": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "generateUserDataCampaign(tuple)": FunctionFragment;
    "listAds(uint256,uint256)": FunctionFragment;
    "listAdsFor(address,uint256,uint256)": FunctionFragment;
    "listAdsIds(uint256,uint256)": FunctionFragment;
    "listCampaignIdsForMe(uint256,uint256)": FunctionFragment;
    "listCampaignIdsForParticipant(address,uint256,uint256)": FunctionFragment;
    "listCampaigns(uint256,uint256)": FunctionFragment;
    "listCampaignsFor(address,uint256,uint256)": FunctionFragment;
    "listMyAds(uint256,uint256)": FunctionFragment;
    "listMyCampaigns(uint256,uint256)": FunctionFragment;
    "listMyParticipations(uint256,uint256)": FunctionFragment;
    "listMyParticipationsCampaign(uint256,uint256)": FunctionFragment;
    "listMyPropositions(uint256,uint256)": FunctionFragment;
    "listParticipantsByCampaign(uint256,uint256,uint256)": FunctionFragment;
    "listParticipationsCampaignFor(address,uint256,uint256)": FunctionFragment;
    "listParticipationsFor(address,uint256,uint256)": FunctionFragment;
    "listPropositionsFor(address,uint256,uint256)": FunctionFragment;
    "listPropositionsForAds(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "prepareAdsSignature(address,string)": FunctionFragment;
    "prepareSignatureCampaign(address,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "socialConfig()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressAds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countCanClaimParticipationsForCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countMyAds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countMyCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countMyParticipations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countMyPropositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateAdsUserData",
    values: [
      {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateUserDataCampaign",
    values: [
      {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listAds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAdsFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAdsIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listCampaignIdsForMe",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listCampaignIdsForParticipant",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listCampaigns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listCampaignsFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMyAds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMyCampaigns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMyParticipations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMyParticipationsCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMyPropositions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listParticipantsByCampaign",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listParticipationsCampaignFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listParticipationsFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPropositionsFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPropositionsForAds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareAdsSignature",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSignatureCampaign",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [{ addressAds: string; addressCampaign: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "socialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addressAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countCanClaimParticipationsForCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countMyAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countMyCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countMyParticipations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countMyPropositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAdsUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateUserDataCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listAdsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listAdsIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCampaignIdsForMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCampaignIdsForParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCampaignsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listMyAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listMyCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listMyParticipations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listMyParticipationsCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listMyPropositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listParticipantsByCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listParticipationsCampaignFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listParticipationsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPropositionsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPropositionsForAds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareAdsSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSignatureCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class SocialViews extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SocialViewsInterface;

  functions: {
    addressAds(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "addressAds()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addressCampaign(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "addressCampaign()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    countCanClaimParticipationsForCampaign(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countCanClaimParticipationsForCampaign(uint256,uint8)"(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countMyAds(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countMyAds()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countMyCampaigns(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countMyCampaigns()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countMyParticipations(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countMyParticipations()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countMyPropositions(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countMyPropositions()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    generateAdsUserData(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateAdsUserData((uint256,uint256,string,string,string[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,(uint256,uint256),uint8))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    generateUserDataCampaign(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateUserDataCampaign((uint256,uint256,bytes,uint256[],uint256,address,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,bytes),bytes,bytes32,uint8))"(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    listAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    "listAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    listAdsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    "listAdsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    listAdsIds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "listAdsIds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    listCampaignIdsForMe(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "listCampaignIdsForMe(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    listCampaignIdsForParticipant(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "listCampaignIdsForParticipant(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    listCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    "listCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    listCampaignsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    "listCampaignsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    listMyAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    "listMyAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[];
    }>;

    listMyCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    "listMyCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    listMyParticipations(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    "listMyParticipations(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    listMyParticipationsCampaign(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    "listMyParticipationsCampaign(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    listMyPropositions(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    "listMyPropositions(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    listParticipantsByCampaign(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    "listParticipantsByCampaign(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    listParticipationsCampaignFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    "listParticipationsCampaignFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[];
    }>;

    listParticipationsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    "listParticipationsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[];
    }>;

    listPropositionsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    "listPropositionsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    listPropositionsForAds(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    "listPropositionsForAds(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[];
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    prepareAdsSignature(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prepareAdsSignature(address,string)"(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepareSignatureCampaign(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "prepareSignatureCampaign(address,bytes32)"(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setConfig(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((address,address))"(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<{
      0: { addressAds: string; addressCampaign: string; 0: string; 1: string };
    }>;

    "socialConfig()"(overrides?: CallOverrides): Promise<{
      0: { addressAds: string; addressCampaign: string; 0: string; 1: string };
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addressAds(overrides?: CallOverrides): Promise<string>;

  "addressAds()"(overrides?: CallOverrides): Promise<string>;

  addressCampaign(overrides?: CallOverrides): Promise<string>;

  "addressCampaign()"(overrides?: CallOverrides): Promise<string>;

  countCanClaimParticipationsForCampaign(
    id: BigNumberish,
    canClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countCanClaimParticipationsForCampaign(uint256,uint8)"(
    id: BigNumberish,
    canClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countMyAds(overrides?: CallOverrides): Promise<BigNumber>;

  "countMyAds()"(overrides?: CallOverrides): Promise<BigNumber>;

  countMyCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

  "countMyCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

  countMyParticipations(overrides?: CallOverrides): Promise<BigNumber>;

  "countMyParticipations()"(overrides?: CallOverrides): Promise<BigNumber>;

  countMyPropositions(overrides?: CallOverrides): Promise<BigNumber>;

  "countMyPropositions()"(overrides?: CallOverrides): Promise<BigNumber>;

  generateAdsUserData(
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      stats: {
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      };
      status: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateAdsUserData((uint256,uint256,string,string,string[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,(uint256,uint256),uint8))"(
    ads: {
      id: BigNumberish;
      network: BigNumberish;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumberish;
      price: BigNumberish;
      priceCurrency: string;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      signature: BytesLike;
      pubKey: BytesLike;
      stats: {
        countProposition: BigNumberish;
        countPropositionAccepted: BigNumberish;
      };
      status: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateUserDataCampaign(
    cam: {
      id: BigNumberish;
      network: BigNumberish;
      uri: BytesLike;
      actions: BigNumberish[];
      price: BigNumberish;
      priceCurrency: string;
      startat: BigNumberish;
      endat: BigNumberish;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      balance: {
        current: BigNumberish;
        accBalance: BigNumberish;
        pendingBalance: BigNumberish;
        description: BytesLike;
      };
      pubKey: BytesLike;
      name: BytesLike;
      status: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateUserDataCampaign((uint256,uint256,bytes,uint256[],uint256,address,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,bytes),bytes,bytes32,uint8))"(
    cam: {
      id: BigNumberish;
      network: BigNumberish;
      uri: BytesLike;
      actions: BigNumberish[];
      price: BigNumberish;
      priceCurrency: string;
      startat: BigNumberish;
      endat: BigNumberish;
      duration: BigNumberish;
      durationPeriod: BigNumberish;
      owner: string;
      balance: {
        current: BigNumberish;
        accBalance: BigNumberish;
        pendingBalance: BigNumberish;
        description: BytesLike;
      };
      pubKey: BytesLike;
      name: BytesLike;
      status: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  listAds(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  "listAds(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  listAdsFor(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  "listAdsFor(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  listAdsIds(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "listAdsIds(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listCampaignIdsForMe(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "listCampaignIdsForMe(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listCampaignIdsForParticipant(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "listCampaignIdsForParticipant(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listCampaigns(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  "listCampaigns(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  listCampaignsFor(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  "listCampaignsFor(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  listMyAds(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  "listMyAds(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }[]
  >;

  listMyCampaigns(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  "listMyCampaigns(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  listMyParticipations(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  "listMyParticipations(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  listMyParticipationsCampaign(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  "listMyParticipationsCampaign(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  listMyPropositions(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  "listMyPropositions(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  listParticipantsByCampaign(
    id: BigNumberish,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  "listParticipantsByCampaign(uint256,uint256,uint256)"(
    id: BigNumberish,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  listParticipationsCampaignFor(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  "listParticipationsCampaignFor(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      network: BigNumber;
      uri: string;
      actions: BigNumber[];
      price: BigNumber;
      priceCurrency: string;
      startat: BigNumber;
      endat: BigNumber;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      balance: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      pubKey: string;
      name: string;
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber[];
      4: BigNumber;
      5: string;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: {
        current: BigNumber;
        accBalance: BigNumber;
        pendingBalance: BigNumber;
        description: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      };
      12: string;
      13: string;
      14: number;
    }[]
  >;

  listParticipationsFor(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  "listParticipationsFor(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      user: string;
      handleHash: string;
      handleEncrypt: string;
      date: BigNumber;
      claimed: boolean;
      canClaim: number;
      campaignId: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: boolean;
      6: number;
      7: BigNumber;
    }[]
  >;

  listPropositionsFor(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  "listPropositionsFor(address,uint256,uint256)"(
    addr: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  listPropositionsForAds(
    id: BigNumberish,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  "listPropositionsForAds(uint256,uint256,uint256)"(
    id: BigNumberish,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }[]
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  prepareAdsSignature(
    owner: string,
    _hash: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "prepareAdsSignature(address,string)"(
    owner: string,
    _hash: string,
    overrides?: CallOverrides
  ): Promise<string>;

  prepareSignatureCampaign(
    owner: string,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "prepareSignatureCampaign(address,bytes32)"(
    owner: string,
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setConfig(
    config: { addressAds: string; addressCampaign: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((address,address))"(
    config: { addressAds: string; addressCampaign: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialConfig(
    overrides?: CallOverrides
  ): Promise<{
    addressAds: string;
    addressCampaign: string;
    0: string;
    1: string;
  }>;

  "socialConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    addressAds: string;
    addressCampaign: string;
    0: string;
    1: string;
  }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addressAds(overrides?: CallOverrides): Promise<string>;

    "addressAds()"(overrides?: CallOverrides): Promise<string>;

    addressCampaign(overrides?: CallOverrides): Promise<string>;

    "addressCampaign()"(overrides?: CallOverrides): Promise<string>;

    countCanClaimParticipationsForCampaign(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countCanClaimParticipationsForCampaign(uint256,uint8)"(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countMyAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyParticipations(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyParticipations()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyPropositions(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyPropositions()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateAdsUserData(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateAdsUserData((uint256,uint256,string,string,string[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,(uint256,uint256),uint8))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateUserDataCampaign(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateUserDataCampaign((uint256,uint256,bytes,uint256[],uint256,address,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,bytes),bytes,bytes32,uint8))"(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    listAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    "listAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    listAdsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    "listAdsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    listAdsIds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "listAdsIds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listCampaignIdsForMe(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "listCampaignIdsForMe(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listCampaignIdsForParticipant(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "listCampaignIdsForParticipant(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    "listCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    listCampaignsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    "listCampaignsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    listMyAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    "listMyAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      }[]
    >;

    listMyCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    "listMyCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    listMyParticipations(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    "listMyParticipations(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    listMyParticipationsCampaign(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    "listMyParticipationsCampaign(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    listMyPropositions(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    "listMyPropositions(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    listParticipantsByCampaign(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    "listParticipantsByCampaign(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    listParticipationsCampaignFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    "listParticipationsCampaignFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        network: BigNumber;
        uri: string;
        actions: BigNumber[];
        price: BigNumber;
        priceCurrency: string;
        startat: BigNumber;
        endat: BigNumber;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        balance: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        pubKey: string;
        name: string;
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: BigNumber[];
        4: BigNumber;
        5: string;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: {
          current: BigNumber;
          accBalance: BigNumber;
          pendingBalance: BigNumber;
          description: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        };
        12: string;
        13: string;
        14: number;
      }[]
    >;

    listParticipationsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    "listParticipationsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        user: string;
        handleHash: string;
        handleEncrypt: string;
        date: BigNumber;
        claimed: boolean;
        canClaim: number;
        campaignId: BigNumber;
        0: BigNumber;
        1: string;
        2: string;
        3: string;
        4: BigNumber;
        5: boolean;
        6: number;
        7: BigNumber;
      }[]
    >;

    listPropositionsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    "listPropositionsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    listPropositionsForAds(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    "listPropositionsForAds(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      }[]
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    prepareAdsSignature(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareAdsSignature(address,string)"(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<string>;

    prepareSignatureCampaign(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareSignatureCampaign(address,bytes32)"(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setConfig(
      config: { addressAds: string; addressCampaign: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfig((address,address))"(
      config: { addressAds: string; addressCampaign: string },
      overrides?: CallOverrides
    ): Promise<void>;

    socialConfig(
      overrides?: CallOverrides
    ): Promise<{
      addressAds: string;
      addressCampaign: string;
      0: string;
      1: string;
    }>;

    "socialConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      addressAds: string;
      addressCampaign: string;
      0: string;
      1: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    addressAds(overrides?: CallOverrides): Promise<BigNumber>;

    "addressAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressCampaign(overrides?: CallOverrides): Promise<BigNumber>;

    "addressCampaign()"(overrides?: CallOverrides): Promise<BigNumber>;

    countCanClaimParticipationsForCampaign(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countCanClaimParticipationsForCampaign(uint256,uint8)"(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countMyAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyCampaigns()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyParticipations(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyParticipations()"(overrides?: CallOverrides): Promise<BigNumber>;

    countMyPropositions(overrides?: CallOverrides): Promise<BigNumber>;

    "countMyPropositions()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateAdsUserData(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateAdsUserData((uint256,uint256,string,string,string[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,(uint256,uint256),uint8))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateUserDataCampaign(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateUserDataCampaign((uint256,uint256,bytes,uint256[],uint256,address,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,bytes),bytes,bytes32,uint8))"(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAdsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listAdsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAdsIds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listAdsIds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCampaignIdsForMe(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listCampaignIdsForMe(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCampaignIdsForParticipant(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listCampaignIdsForParticipant(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCampaignsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listCampaignsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listMyAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listMyAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listMyCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listMyCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listMyParticipations(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listMyParticipations(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listMyParticipationsCampaign(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listMyParticipationsCampaign(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listMyPropositions(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listMyPropositions(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listParticipantsByCampaign(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listParticipantsByCampaign(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listParticipationsCampaignFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listParticipationsCampaignFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listParticipationsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listParticipationsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPropositionsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listPropositionsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPropositionsForAds(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listPropositionsForAds(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareAdsSignature(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareAdsSignature(address,string)"(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareSignatureCampaign(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareSignatureCampaign(address,bytes32)"(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setConfig(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((address,address))"(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "socialConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressAds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressAds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressCampaign(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressCampaign()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countCanClaimParticipationsForCampaign(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countCanClaimParticipationsForCampaign(uint256,uint8)"(
      id: BigNumberish,
      canClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countMyAds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countMyAds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countMyCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countMyCampaigns()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countMyParticipations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countMyParticipations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countMyPropositions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countMyPropositions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateAdsUserData(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateAdsUserData((uint256,uint256,string,string,string[],uint256,uint256,address,uint256,uint256,address,bytes,bytes,(uint256,uint256),uint8))"(
      ads: {
        id: BigNumberish;
        network: BigNumberish;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumberish;
        price: BigNumberish;
        priceCurrency: string;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        signature: BytesLike;
        pubKey: BytesLike;
        stats: {
          countProposition: BigNumberish;
          countPropositionAccepted: BigNumberish;
        };
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateUserDataCampaign(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateUserDataCampaign((uint256,uint256,bytes,uint256[],uint256,address,uint256,uint256,uint256,uint256,address,(uint256,uint256,uint256,bytes),bytes,bytes32,uint8))"(
      cam: {
        id: BigNumberish;
        network: BigNumberish;
        uri: BytesLike;
        actions: BigNumberish[];
        price: BigNumberish;
        priceCurrency: string;
        startat: BigNumberish;
        endat: BigNumberish;
        duration: BigNumberish;
        durationPeriod: BigNumberish;
        owner: string;
        balance: {
          current: BigNumberish;
          accBalance: BigNumberish;
          pendingBalance: BigNumberish;
          description: BytesLike;
        };
        pubKey: BytesLike;
        name: BytesLike;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAdsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listAdsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAdsIds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listAdsIds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCampaignIdsForMe(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listCampaignIdsForMe(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCampaignIdsForParticipant(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listCampaignIdsForParticipant(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCampaignsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listCampaignsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listMyAds(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listMyAds(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listMyCampaigns(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listMyCampaigns(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listMyParticipations(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listMyParticipations(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listMyParticipationsCampaign(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listMyParticipationsCampaign(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listMyPropositions(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listMyPropositions(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listParticipantsByCampaign(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listParticipantsByCampaign(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listParticipationsCampaignFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listParticipationsCampaignFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listParticipationsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listParticipationsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPropositionsFor(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listPropositionsFor(address,uint256,uint256)"(
      addr: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPropositionsForAds(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listPropositionsForAds(uint256,uint256,uint256)"(
      id: BigNumberish,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareAdsSignature(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepareAdsSignature(address,string)"(
      owner: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareSignatureCampaign(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepareSignatureCampaign(address,bytes32)"(
      owner: string,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setConfig(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((address,address))"(
      config: { addressAds: string; addressCampaign: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "socialConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
