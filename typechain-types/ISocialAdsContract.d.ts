/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISocialAdsContractInterface extends ethers.utils.Interface {
  functions: {
    "countAds()": FunctionFragment;
    "countAdsFor(address)": FunctionFragment;
    "countPropositionsFor(address)": FunctionFragment;
    "countPropositionsForAds(uint256)": FunctionFragment;
    "getAdsById(uint256)": FunctionFragment;
    "getAdsByIndex(uint256)": FunctionFragment;
    "getAdsByIndexAndAddress(address,uint256)": FunctionFragment;
    "getAdsId(uint256)": FunctionFragment;
    "getPropositionById(uint256)": FunctionFragment;
    "getPropositionByIndexAndAddress(address,uint256)": FunctionFragment;
    "getPropositionByIndexAndAdsId(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "countAds", values?: undefined): string;
  encodeFunctionData(functionFragment: "countAdsFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "countPropositionsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countPropositionsForAds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsByIndexAndAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdsId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositionByIndexAndAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositionByIndexAndAdsId",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "countAds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countAdsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPropositionsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPropositionsForAds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdsById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdsByIndexAndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdsId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionByIndexAndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositionByIndexAndAdsId",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISocialAdsContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISocialAdsContractInterface;

  functions: {
    countAds(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countAds()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countAdsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        network: BigNumber;
        handle: string;
        description: string;
        audiences: string[];
        followers: BigNumber;
        price: BigNumber;
        priceCurrency: string;
        duration: BigNumber;
        durationPeriod: BigNumber;
        owner: string;
        signature: string;
        pubKey: string;
        stats: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        status: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string[];
        5: BigNumber;
        6: BigNumber;
        7: string;
        8: BigNumber;
        9: BigNumber;
        10: string;
        11: string;
        12: string;
        13: {
          countProposition: BigNumber;
          countPropositionAccepted: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        14: number;
      };
    }>;

    getAdsId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAdsId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        id: BigNumber;
        adsId: BigNumber;
        startat: BigNumber;
        endat: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
        accepted: number;
        canClaim: number;
        claimed: boolean;
        description: string;
        pubKey: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: string;
        6: string;
        7: number;
        8: number;
        9: boolean;
        10: string;
        11: string;
      };
    }>;
  };

  countAds(overrides?: CallOverrides): Promise<BigNumber>;

  "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

  countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "countAdsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPropositionsFor(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countPropositionsFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPropositionsForAds(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countPropositionsForAds(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdsById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  "getAdsById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  getAdsByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  "getAdsByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  getAdsByIndexAndAddress(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  "getAdsByIndexAndAddress(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    network: BigNumber;
    handle: string;
    description: string;
    audiences: string[];
    followers: BigNumber;
    price: BigNumber;
    priceCurrency: string;
    duration: BigNumber;
    durationPeriod: BigNumber;
    owner: string;
    signature: string;
    pubKey: string;
    stats: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    status: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string[];
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
    13: {
      countProposition: BigNumber;
      countPropositionAccepted: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    14: number;
  }>;

  getAdsId(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getAdsId(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPropositionById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionById(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  getPropositionByIndexAndAddress(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionByIndexAndAddress(address,uint256)"(
    addr: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  getPropositionByIndexAndAdsId(
    adsid: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  "getPropositionByIndexAndAdsId(uint256,uint256)"(
    adsid: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    adsId: BigNumber;
    startat: BigNumber;
    endat: BigNumber;
    amount: BigNumber;
    currency: string;
    owner: string;
    accepted: number;
    canClaim: number;
    claimed: boolean;
    description: string;
    pubKey: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: string;
    7: number;
    8: number;
    9: boolean;
    10: string;
    11: string;
  }>;

  callStatic: {
    countAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      network: BigNumber;
      handle: string;
      description: string;
      audiences: string[];
      followers: BigNumber;
      price: BigNumber;
      priceCurrency: string;
      duration: BigNumber;
      durationPeriod: BigNumber;
      owner: string;
      signature: string;
      pubKey: string;
      stats: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      status: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string[];
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
      13: {
        countProposition: BigNumber;
        countPropositionAccepted: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      14: number;
    }>;

    getAdsId(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAdsId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      adsId: BigNumber;
      startat: BigNumber;
      endat: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
      accepted: number;
      canClaim: number;
      claimed: boolean;
      description: string;
      pubKey: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: string;
      7: number;
      8: number;
      9: boolean;
      10: string;
      11: string;
    }>;
  };

  filters: {};

  estimateGas: {
    countAds(overrides?: CallOverrides): Promise<BigNumber>;

    "countAds()"(overrides?: CallOverrides): Promise<BigNumber>;

    countAdsFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsById(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdsId(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAdsId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    countAds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countAds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countAdsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countAdsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPropositionsFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countPropositionsFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPropositionsForAds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countPropositionsForAds(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdsId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdsId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionById(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionByIndexAndAddress(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionByIndexAndAddress(address,uint256)"(
      addr: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPropositionByIndexAndAdsId(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPropositionByIndexAndAdsId(uint256,uint256)"(
      adsid: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
