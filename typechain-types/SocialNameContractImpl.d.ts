/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SocialNameContractImplInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "balanceCoin()": FunctionFragment;
    "balanceToken(address)": FunctionFragment;
    "cancelOne(uint256)": FunctionFragment;
    "claimAll(bytes32)": FunctionFragment;
    "claimOne(bytes32,uint256)": FunctionFragment;
    "claimPiggybank(bytes32,bool)": FunctionFragment;
    "createRegistration(tuple)": FunctionFragment;
    "deleteRegistration(bytes32)": FunctionFragment;
    "depositCoin(bytes32,bool)": FunctionFragment;
    "depositToken(bytes32,bool,address,uint256)": FunctionFragment;
    "doRegisterPublic(address,tuple,uint256,bool)": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockCount()": FunctionFragment;
    "locked(bytes32)": FunctionFragment;
    "messageAddressHash(address)": FunctionFragment;
    "messageById(uint256)": FunctionFragment;
    "messageByReceiver(bytes32,uint256)": FunctionFragment;
    "messageBySender(bytes32,uint256)": FunctionFragment;
    "messageBySubjectId(bytes32,uint256)": FunctionFragment;
    "messageSubjectByAddress(bytes32,uint256)": FunctionFragment;
    "messageSubjectCount(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "paymantById(uint256)": FunctionFragment;
    "paymentReceived(bytes32,uint256)": FunctionFragment;
    "paymentSent(bytes32,uint256)": FunctionFragment;
    "piggyBankById(bytes32)": FunctionFragment;
    "piggyBankHash(address,address)": FunctionFragment;
    "piggyBankHashSecure(bytes32,bool)": FunctionFragment;
    "pricing(bytes32)": FunctionFragment;
    "register(tuple)": FunctionFragment;
    "registrationCount()": FunctionFragment;
    "registrationsById(uint256)": FunctionFragment;
    "registrationsByName(bytes32)": FunctionFragment;
    "registrationsOwner(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "send(bytes32,address,uint256,bool)": FunctionFragment;
    "sendCoin(bytes32,bool)": FunctionFragment;
    "sendMessage(bytes32,tuple)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "socialConfig()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockPayment(bytes32,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unregister(uint256)": FunctionFragment;
    "updateRegistration(uint256,address,bytes32,bytes,bytes)": FunctionFragment;
    "withdrawCoin()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOne",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimOne",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPiggybank",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createRegistration",
    values: [
      {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRegistration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCoin",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [BytesLike, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doRegisterPublic",
    values: [
      string,
      {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "messageAddressHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "messageById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageByReceiver",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageBySender",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageBySubjectId",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageSubjectByAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageSubjectCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymantById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentReceived",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentSent",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "piggyBankById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "piggyBankHash",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "piggyBankHashSecure",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "pricing", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationsByName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationsOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BytesLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCoin",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      BytesLike,
      {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "socialConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistration",
    values: [BigNumberish, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimOne", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPiggybank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doRegisterPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageAddressHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageByReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageBySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageBySubjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSubjectByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSubjectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymantById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piggyBankById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piggyBankHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piggyBankHashSecure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pricing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationsByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OnRegister(address,tuple)": EventFragment;
    "OnSend(tuple)": EventFragment;
    "OnUnRegister(address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnRegister"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnUnRegister"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class SocialNameContractImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SocialNameContractImplInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceCoin(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelOne(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOne(uint256)"(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAll(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAll(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimOne(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimOne(bytes32,uint256)"(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimPiggybank(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimPiggybank(bytes32,bool)"(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createRegistration(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRegistration((uint256,address,bytes32,uint256,bytes,bytes))"(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteRegistration(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteRegistration(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositCoin(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositCoin(bytes32,bool)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    depositToken(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositToken(bytes32,bool,address,uint256)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    doRegisterPublic(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doRegisterPublic(address,(uint256,address,bytes32,uint256,bytes,bytes),uint256,bool)"(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    messageAddressHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "messageAddressHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    messageById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      subjectId: string;
      senderPubKey: string;
      receiverPubKey: string;
      encryptMessage: string;
      myEncryptMessage: string;
      sender: string;
      receiver: string;
      date: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    "messageById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      subjectId: string;
      senderPubKey: string;
      receiverPubKey: string;
      encryptMessage: string;
      myEncryptMessage: string;
      sender: string;
      receiver: string;
      date: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    messageByReceiver(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "messageByReceiver(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    messageBySender(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "messageBySender(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    messageBySubjectId(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "messageBySubjectId(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    messageSubjectByAddress(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "messageSubjectByAddress(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    messageSubjectCount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "messageSubjectCount(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    paymantById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      date: BigNumber;
      from: string;
      to: string;
      amount: BigNumber;
      currency: string;
      claimed: boolean;
      cancel: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
      7: boolean;
    }>;

    "paymantById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      date: BigNumber;
      from: string;
      to: string;
      amount: BigNumber;
      currency: string;
      claimed: boolean;
      cancel: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
      7: boolean;
    }>;

    paymentReceived(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paymentReceived(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paymentSent(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paymentSent(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    piggyBankById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      date: BigNumber;
      amount: BigNumber;
      currency: string;
      claimed: BigNumber;
      secure: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: boolean;
    }>;

    "piggyBankById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      date: BigNumber;
      amount: BigNumber;
      currency: string;
      claimed: BigNumber;
      secure: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: boolean;
    }>;

    piggyBankHash(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "piggyBankHash(address,address)"(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    piggyBankHashSecure(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "piggyBankHashSecure(bytes32,bool)"(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    register(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register((uint256,address,bytes32,uint256,bytes,bytes))"(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registrationCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "registrationCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    registrationsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      owner: string;
      name: string;
      network: BigNumber;
      encryptName: string;
      signature: string;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    "registrationsById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      owner: string;
      name: string;
      network: BigNumber;
      encryptName: string;
      signature: string;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    registrationsByName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "registrationsByName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    registrationsOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "registrationsOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    send(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "send(bytes32,address,uint256,bool)"(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sendCoin(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sendCoin(bytes32,bool)"(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((address,(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),bool,address,bool,address))"(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        registration: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        fee: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        deposit: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
        0: string;
        1: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        2: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        4: boolean;
        5: string;
        6: boolean;
        7: string;
      };
    }>;

    "socialConfig()"(overrides?: CallOverrides): Promise<{
      0: {
        tokenAddress: string;
        registration: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        fee: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        deposit: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
        0: string;
        1: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        2: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        3: {
          amount: BigNumber;
          service: string;
          currency: string;
          paymentType: number;
          0: BigNumber;
          1: string;
          2: string;
          3: number;
        };
        4: boolean;
        5: string;
        6: boolean;
        7: string;
      };
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    unregister(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unregister(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistration(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRegistration(uint256,address,bytes32,bytes,bytes)"(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOne(
    paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOne(uint256)"(
    paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAll(
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAll(bytes32)"(
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimOne(
    _hash: BytesLike,
    paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimOne(bytes32,uint256)"(
    _hash: BytesLike,
    paymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimPiggybank(
    _piggyBankHash: BytesLike,
    secure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimPiggybank(bytes32,bool)"(
    _piggyBankHash: BytesLike,
    secure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createRegistration(
    original: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRegistration((uint256,address,bytes32,uint256,bytes,bytes))"(
    original: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteRegistration(
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteRegistration(bytes32)"(
    _hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositCoin(
    piggyBankHash: BytesLike,
    secure: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositCoin(bytes32,bool)"(
    piggyBankHash: BytesLike,
    secure: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  depositToken(
    piggyBankHash: BytesLike,
    secure: boolean,
    _token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositToken(bytes32,bool,address,uint256)"(
    piggyBankHash: BytesLike,
    secure: boolean,
    _token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  doRegisterPublic(
    owner: string,
    original: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    amount: BigNumberish,
    makeTransfer: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doRegisterPublic(address,(uint256,address,bytes32,uint256,bytes,bytes),uint256,bool)"(
    owner: string,
    original: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    amount: BigNumberish,
    makeTransfer: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "getPrice(bytes32)"(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  "locked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  messageAddressHash(_addr: string, overrides?: CallOverrides): Promise<string>;

  "messageAddressHash(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  messageById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    subjectId: string;
    senderPubKey: string;
    receiverPubKey: string;
    encryptMessage: string;
    myEncryptMessage: string;
    sender: string;
    receiver: string;
    date: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  "messageById(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    subjectId: string;
    senderPubKey: string;
    receiverPubKey: string;
    encryptMessage: string;
    myEncryptMessage: string;
    sender: string;
    receiver: string;
    date: BigNumber;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  messageByReceiver(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "messageByReceiver(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageBySender(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "messageBySender(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageBySubjectId(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "messageBySubjectId(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageSubjectByAddress(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "messageSubjectByAddress(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  messageSubjectCount(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "messageSubjectCount(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  paymantById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    date: BigNumber;
    from: string;
    to: string;
    amount: BigNumber;
    currency: string;
    claimed: boolean;
    cancel: boolean;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: BigNumber;
    5: string;
    6: boolean;
    7: boolean;
  }>;

  "paymantById(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    date: BigNumber;
    from: string;
    to: string;
    amount: BigNumber;
    currency: string;
    claimed: boolean;
    cancel: boolean;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: BigNumber;
    5: string;
    6: boolean;
    7: boolean;
  }>;

  paymentReceived(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "paymentReceived(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paymentSent(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "paymentSent(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  piggyBankById(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    id: string;
    date: BigNumber;
    amount: BigNumber;
    currency: string;
    claimed: BigNumber;
    secure: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: boolean;
  }>;

  "piggyBankById(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    id: string;
    date: BigNumber;
    amount: BigNumber;
    currency: string;
    claimed: BigNumber;
    secure: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: boolean;
  }>;

  piggyBankHash(
    _addr: string,
    _currency: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "piggyBankHash(address,address)"(
    _addr: string,
    _currency: string,
    overrides?: CallOverrides
  ): Promise<string>;

  piggyBankHashSecure(
    _hash: BytesLike,
    _secure: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "piggyBankHashSecure(bytes32,bool)"(
    _hash: BytesLike,
    _secure: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  pricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "pricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  register(
    registration: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register((uint256,address,bytes32,uint256,bytes,bytes))"(
    registration: {
      id: BigNumberish;
      owner: string;
      name: BytesLike;
      network: BigNumberish;
      encryptName: BytesLike;
      signature: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registrationCount(overrides?: CallOverrides): Promise<BigNumber>;

  "registrationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  registrationsById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    owner: string;
    name: string;
    network: BigNumber;
    encryptName: string;
    signature: string;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
  }>;

  "registrationsById(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    owner: string;
    name: string;
    network: BigNumber;
    encryptName: string;
    signature: string;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: string;
  }>;

  registrationsByName(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "registrationsByName(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registrationsOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "registrationsOwner(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  send(
    _hash: BytesLike,
    _token: string,
    amount: BigNumberish,
    eventIfNotExist: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "send(bytes32,address,uint256,bool)"(
    _hash: BytesLike,
    _token: string,
    amount: BigNumberish,
    eventIfNotExist: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sendCoin(
    _hash: BytesLike,
    eventIfNotExist: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sendCoin(bytes32,bool)"(
    _hash: BytesLike,
    eventIfNotExist: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sendMessage(
    subjectId: BytesLike,
    message: {
      id: BigNumberish;
      subjectId: BytesLike;
      senderPubKey: BytesLike;
      receiverPubKey: BytesLike;
      encryptMessage: BytesLike;
      myEncryptMessage: BytesLike;
      sender: BytesLike;
      receiver: BytesLike;
      date: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
    subjectId: BytesLike,
    message: {
      id: BigNumberish;
      subjectId: BytesLike;
      senderPubKey: BytesLike;
      receiverPubKey: BytesLike;
      encryptMessage: BytesLike;
      myEncryptMessage: BytesLike;
      sender: BytesLike;
      receiver: BytesLike;
      date: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      tokenAddress: string;
      registration: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      fee: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      deposit: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      validatorRequire: boolean;
      validator: string;
      allowChangeOwner: boolean;
      libAddress: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((address,(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),bool,address,bool,address))"(
    config: {
      tokenAddress: string;
      registration: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      fee: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      deposit: {
        amount: BigNumberish;
        service: BytesLike;
        currency: string;
        paymentType: BigNumberish;
      };
      validatorRequire: boolean;
      validator: string;
      allowChangeOwner: boolean;
      libAddress: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialConfig(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    registration: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    fee: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    deposit: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    validatorRequire: boolean;
    validator: string;
    allowChangeOwner: boolean;
    libAddress: string;
    0: string;
    1: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    2: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    4: boolean;
    5: string;
    6: boolean;
    7: string;
  }>;

  "socialConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    registration: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    fee: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    deposit: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    validatorRequire: boolean;
    validator: string;
    allowChangeOwner: boolean;
    libAddress: string;
    0: string;
    1: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    2: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    3: {
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    };
    4: boolean;
    5: string;
    6: boolean;
    7: string;
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensReceived(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockPayment(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockPayment(bytes32,uint256,address)"(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  unregister(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unregister(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistration(
    id: BigNumberish,
    newOwner: string,
    newName: BytesLike,
    newEncryptName: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRegistration(uint256,address,bytes32,bytes,bytes)"(
    id: BigNumberish,
    newOwner: string,
    newName: BytesLike,
    newEncryptName: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOne(
      paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOne(uint256)"(
      paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAll(_hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "claimAll(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOne(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimOne(bytes32,uint256)"(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPiggybank(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimPiggybank(bytes32,bool)"(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createRegistration(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "createRegistration((uint256,address,bytes32,uint256,bytes,bytes))"(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRegistration(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteRegistration(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCoin(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositCoin(bytes32,bool)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositToken(bytes32,bool,address,uint256)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    doRegisterPublic(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "doRegisterPublic(address,(uint256,address,bytes32,uint256,bytes,bytes),uint256,bool)"(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    messageAddressHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "messageAddressHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    messageById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      subjectId: string;
      senderPubKey: string;
      receiverPubKey: string;
      encryptMessage: string;
      myEncryptMessage: string;
      sender: string;
      receiver: string;
      date: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    "messageById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      subjectId: string;
      senderPubKey: string;
      receiverPubKey: string;
      encryptMessage: string;
      myEncryptMessage: string;
      sender: string;
      receiver: string;
      date: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    messageByReceiver(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageByReceiver(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageBySender(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageBySender(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageBySubjectId(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageBySubjectId(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageSubjectByAddress(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "messageSubjectByAddress(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    messageSubjectCount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageSubjectCount(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    "pause()"(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    paymantById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      date: BigNumber;
      from: string;
      to: string;
      amount: BigNumber;
      currency: string;
      claimed: boolean;
      cancel: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
      7: boolean;
    }>;

    "paymantById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      date: BigNumber;
      from: string;
      to: string;
      amount: BigNumber;
      currency: string;
      claimed: boolean;
      cancel: boolean;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
      7: boolean;
    }>;

    paymentReceived(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentReceived(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentSent(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentSent(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    piggyBankById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      date: BigNumber;
      amount: BigNumber;
      currency: string;
      claimed: BigNumber;
      secure: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: boolean;
    }>;

    "piggyBankById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      date: BigNumber;
      amount: BigNumber;
      currency: string;
      claimed: BigNumber;
      secure: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: boolean;
    }>;

    piggyBankHash(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "piggyBankHash(address,address)"(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<string>;

    piggyBankHashSecure(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "piggyBankHashSecure(bytes32,bool)"(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    register(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "register((uint256,address,bytes32,uint256,bytes,bytes))"(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    registrationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "registrationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    registrationsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      owner: string;
      name: string;
      network: BigNumber;
      encryptName: string;
      signature: string;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    "registrationsById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      owner: string;
      name: string;
      network: BigNumber;
      encryptName: string;
      signature: string;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: string;
    }>;

    registrationsByName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registrationsByName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationsOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registrationsOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "send(bytes32,address,uint256,bool)"(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCoin(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCoin(bytes32,bool)"(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setConfig((address,(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),bool,address,bool,address))"(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    socialConfig(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      registration: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      fee: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      deposit: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      validatorRequire: boolean;
      validator: string;
      allowChangeOwner: boolean;
      libAddress: string;
      0: string;
      1: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      2: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      4: boolean;
      5: string;
      6: boolean;
      7: string;
    }>;

    "socialConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      registration: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      fee: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      deposit: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      validatorRequire: boolean;
      validator: string;
      allowChangeOwner: boolean;
      libAddress: string;
      0: string;
      1: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      2: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      3: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
      4: boolean;
      5: string;
      6: boolean;
      7: string;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    "unpause()"(overrides?: CallOverrides): Promise<boolean>;

    unregister(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unregister(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistration(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRegistration(uint256,address,bytes32,bytes,bytes)"(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCoin(overrides?: CallOverrides): Promise<boolean>;

    "withdrawCoin()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OnRegister(addr: null, registration: null): EventFilter;

    OnSend(message: null): EventFilter;

    OnUnRegister(addr: null, registration: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOne(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOne(uint256)"(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAll(_hash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "claimAll(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimOne(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimOne(bytes32,uint256)"(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimPiggybank(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimPiggybank(bytes32,bool)"(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createRegistration(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRegistration((uint256,address,bytes32,uint256,bytes,bytes))"(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteRegistration(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteRegistration(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositCoin(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositCoin(bytes32,bool)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    depositToken(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositToken(bytes32,bool,address,uint256)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    doRegisterPublic(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doRegisterPublic(address,(uint256,address,bytes32,uint256,bytes,bytes),uint256,bool)"(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(service: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageAddressHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageAddressHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageByReceiver(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageByReceiver(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageBySender(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageBySender(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageBySubjectId(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageBySubjectId(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageSubjectByAddress(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageSubjectByAddress(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageSubjectCount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "messageSubjectCount(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymantById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymantById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentReceived(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentReceived(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentSent(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentSent(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    piggyBankById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "piggyBankById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    piggyBankHash(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "piggyBankHash(address,address)"(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    piggyBankHashSecure(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "piggyBankHashSecure(bytes32,bool)"(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricing(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register((uint256,address,bytes32,uint256,bytes,bytes))"(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    registrationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "registrationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    registrationsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registrationsById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationsByName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registrationsByName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationsOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registrationsOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    send(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "send(bytes32,address,uint256,bool)"(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sendCoin(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sendCoin(bytes32,bool)"(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConfig(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((address,(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),bool,address,bool,address))"(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "socialConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    unregister(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unregister(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistration(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRegistration(uint256,address,bytes32,bytes,bytes)"(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: Overrides): Promise<BigNumber>;

    "withdrawCoin()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOne(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOne(uint256)"(
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAll(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAll(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimOne(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimOne(bytes32,uint256)"(
      _hash: BytesLike,
      paymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimPiggybank(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimPiggybank(bytes32,bool)"(
      _piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createRegistration(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRegistration((uint256,address,bytes32,uint256,bytes,bytes))"(
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteRegistration(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteRegistration(bytes32)"(
      _hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositCoin(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositCoin(bytes32,bool)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositToken(bytes32,bool,address,uint256)"(
      piggyBankHash: BytesLike,
      secure: boolean,
      _token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    doRegisterPublic(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doRegisterPublic(address,(uint256,address,bytes32,uint256,bytes,bytes),uint256,bool)"(
      owner: string,
      original: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      amount: BigNumberish,
      makeTransfer: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageAddressHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageAddressHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageByReceiver(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageByReceiver(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageBySender(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageBySender(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageBySubjectId(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageBySubjectId(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageSubjectByAddress(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageSubjectByAddress(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageSubjectCount(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "messageSubjectCount(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymantById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymantById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentReceived(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentReceived(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentSent(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentSent(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    piggyBankById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "piggyBankById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    piggyBankHash(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "piggyBankHash(address,address)"(
      _addr: string,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    piggyBankHashSecure(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "piggyBankHashSecure(bytes32,bool)"(
      _hash: BytesLike,
      _secure: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register((uint256,address,bytes32,uint256,bytes,bytes))"(
      registration: {
        id: BigNumberish;
        owner: string;
        name: BytesLike;
        network: BigNumberish;
        encryptName: BytesLike;
        signature: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registrationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registrationCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registrationsById(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationsByName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registrationsByName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationsOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registrationsOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    send(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "send(bytes32,address,uint256,bool)"(
      _hash: BytesLike,
      _token: string,
      amount: BigNumberish,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sendCoin(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sendCoin(bytes32,bool)"(
      _hash: BytesLike,
      eventIfNotExist: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sendMessage(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendMessage(bytes32,(uint256,bytes32,bytes,bytes,bytes,bytes,bytes32,bytes32,uint256))"(
      subjectId: BytesLike,
      message: {
        id: BigNumberish;
        subjectId: BytesLike;
        senderPubKey: BytesLike;
        receiverPubKey: BytesLike;
        encryptMessage: BytesLike;
        myEncryptMessage: BytesLike;
        sender: BytesLike;
        receiver: BytesLike;
        date: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((address,(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),(uint256,bytes32,address,uint8),bool,address,bool,address))"(
      config: {
        tokenAddress: string;
        registration: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        fee: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        deposit: {
          amount: BigNumberish;
          service: BytesLike;
          currency: string;
          paymentType: BigNumberish;
        };
        validatorRequire: boolean;
        validator: string;
        allowChangeOwner: boolean;
        libAddress: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "socialConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unregister(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unregister(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistration(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRegistration(uint256,address,bytes32,bytes,bytes)"(
      id: BigNumberish,
      newOwner: string,
      newName: BytesLike,
      newEncryptName: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
