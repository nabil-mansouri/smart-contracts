/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingContractInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "balanceCoin()": FunctionFragment;
    "balanceToken(address)": FunctionFragment;
    "collectRewards()": FunctionFragment;
    "collectRewardsCheck()": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "historyOf(address)": FunctionFragment;
    "lockCount()": FunctionFragment;
    "locked(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pricing(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardOf(address)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "stackingInfos()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeCheck(uint256)": FunctionFragment;
    "stakeConfig()": FunctionFragment;
    "stakingOf(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockPayment(bytes32,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
    "withdrawCheck(uint256)": FunctionFragment;
    "withdrawCoin()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectRewardsCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "historyOf", values: [string]): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pricing", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "rewardOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stackingInfos",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeCheck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stakingOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCheck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRewardsCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "historyOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pricing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stackingInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakingOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserCollected(address,uint256)": EventFragment;
    "UserStaked(address,uint256)": EventFragment;
    "UserWithdrawed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdrawed"): EventFragment;
}

export class StakingContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingContractInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceCoin(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    collectRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "collectRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    collectRewardsCheck(overrides?: Overrides): Promise<ContractTransaction>;

    "collectRewardsCheck()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      }[];
    }>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      }[];
    }>;

    lockCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { earned: BigNumber; paid: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "rewardOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { earned: BigNumber; paid: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((uint256,uint256,uint256,address,uint256))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stackingInfos(overrides?: CallOverrides): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        stakeMax: BigNumber;
        stakeRemain: BigNumber;
        stakeTotal: BigNumber;
        rewardTotal: BigNumber;
        rewardRemain: BigNumber;
        rewardDistribute: BigNumber;
        rewardPercent: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    "stackingInfos()"(overrides?: CallOverrides): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        stakeMax: BigNumber;
        stakeRemain: BigNumber;
        stakeTotal: BigNumber;
        rewardTotal: BigNumber;
        rewardRemain: BigNumber;
        rewardDistribute: BigNumber;
        rewardPercent: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeConfig(overrides?: CallOverrides): Promise<{
      0: {
        endDate: BigNumber;
        startDate: BigNumber;
        rewardTotal: BigNumber;
        tokenAddress: string;
        rewardPercent: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
      };
    }>;

    "stakeConfig()"(overrides?: CallOverrides): Promise<{
      0: {
        endDate: BigNumber;
        startDate: BigNumber;
        rewardTotal: BigNumber;
        tokenAddress: string;
        rewardPercent: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
      };
    }>;

    stakingOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      };
    }>;

    "stakingOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      };
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokensReceived(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "collectRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  collectRewardsCheck(overrides?: Overrides): Promise<ContractTransaction>;

  "collectRewardsCheck()"(overrides?: Overrides): Promise<ContractTransaction>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "getPrice(bytes32)"(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  historyOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    {
      startAt: BigNumber;
      endAt: BigNumber;
      staked: BigNumber;
      earned: BigNumber;
      paid: BigNumber;
      closed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
    }[]
  >;

  "historyOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    {
      startAt: BigNumber;
      endAt: BigNumber;
      staked: BigNumber;
      earned: BigNumber;
      paid: BigNumber;
      closed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
    }[]
  >;

  lockCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  "locked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "pricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    earned: BigNumber;
    paid: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "rewardOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    earned: BigNumber;
    paid: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  setConfig(
    config: {
      endDate: BigNumberish;
      startDate: BigNumberish;
      rewardTotal: BigNumberish;
      tokenAddress: string;
      rewardPercent: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((uint256,uint256,uint256,address,uint256))"(
    config: {
      endDate: BigNumberish;
      startDate: BigNumberish;
      rewardTotal: BigNumberish;
      tokenAddress: string;
      rewardPercent: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stackingInfos(
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    stakeMax: BigNumber;
    stakeRemain: BigNumber;
    stakeTotal: BigNumber;
    rewardTotal: BigNumber;
    rewardRemain: BigNumber;
    rewardDistribute: BigNumber;
    rewardPercent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  "stackingInfos()"(
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    stakeMax: BigNumber;
    stakeRemain: BigNumber;
    stakeTotal: BigNumber;
    rewardTotal: BigNumber;
    rewardRemain: BigNumber;
    rewardDistribute: BigNumber;
    rewardPercent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeCheck(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeCheck(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeConfig(
    overrides?: CallOverrides
  ): Promise<{
    endDate: BigNumber;
    startDate: BigNumber;
    rewardTotal: BigNumber;
    tokenAddress: string;
    rewardPercent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  "stakeConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    endDate: BigNumber;
    startDate: BigNumber;
    rewardTotal: BigNumber;
    tokenAddress: string;
    rewardPercent: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  stakingOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    staked: BigNumber;
    earned: BigNumber;
    paid: BigNumber;
    closed: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
  }>;

  "stakingOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    staked: BigNumber;
    earned: BigNumber;
    paid: BigNumber;
    closed: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensReceived(
    arg0: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    arg0: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockPayment(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockPayment(bytes32,uint256,address)"(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    _collect: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    _amount: BigNumberish,
    _collect: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCheck(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawCheck(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "collectRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectRewardsCheck(overrides?: CallOverrides): Promise<BigNumber>;

    "collectRewardsCheck()"(overrides?: CallOverrides): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      }[]
    >;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      {
        startAt: BigNumber;
        endAt: BigNumber;
        staked: BigNumber;
        earned: BigNumber;
        paid: BigNumber;
        closed: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
      }[]
    >;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    "pause()"(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      earned: BigNumber;
      paid: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "rewardOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      earned: BigNumber;
      paid: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setConfig((uint256,uint256,uint256,address,uint256))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    stackingInfos(
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      stakeMax: BigNumber;
      stakeRemain: BigNumber;
      stakeTotal: BigNumber;
      rewardTotal: BigNumber;
      rewardRemain: BigNumber;
      rewardDistribute: BigNumber;
      rewardPercent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    "stackingInfos()"(
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      stakeMax: BigNumber;
      stakeRemain: BigNumber;
      stakeTotal: BigNumber;
      rewardTotal: BigNumber;
      rewardRemain: BigNumber;
      rewardDistribute: BigNumber;
      rewardPercent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakeCheck(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stakeCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakeConfig(
      overrides?: CallOverrides
    ): Promise<{
      endDate: BigNumber;
      startDate: BigNumber;
      rewardTotal: BigNumber;
      tokenAddress: string;
      rewardPercent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    "stakeConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      endDate: BigNumber;
      startDate: BigNumber;
      rewardTotal: BigNumber;
      tokenAddress: string;
      rewardPercent: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    stakingOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      staked: BigNumber;
      earned: BigNumber;
      paid: BigNumber;
      closed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
    }>;

    "stakingOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      staked: BigNumber;
      earned: BigNumber;
      paid: BigNumber;
      closed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensReceived(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    "unpause()"(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(uint256,bool)"(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCheck(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCoin(overrides?: CallOverrides): Promise<boolean>;

    "withdrawCoin()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;

    UserCollected(from: null, amount: null): EventFilter;

    UserStaked(from: null, amount: null): EventFilter;

    UserWithdrawed(from: null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRewards(overrides?: Overrides): Promise<BigNumber>;

    "collectRewards()"(overrides?: Overrides): Promise<BigNumber>;

    collectRewardsCheck(overrides?: Overrides): Promise<BigNumber>;

    "collectRewardsCheck()"(overrides?: Overrides): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(service: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricing(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((uint256,uint256,uint256,address,uint256))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    stackingInfos(overrides?: CallOverrides): Promise<BigNumber>;

    "stackingInfos()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakingOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: Overrides): Promise<BigNumber>;

    "withdrawCoin()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "collectRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    collectRewardsCheck(overrides?: Overrides): Promise<PopulatedTransaction>;

    "collectRewardsCheck()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((uint256,uint256,uint256,address,uint256))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        rewardTotal: BigNumberish;
        tokenAddress: string;
        rewardPercent: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stackingInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stackingInfos()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      arg0: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      _amount: BigNumberish,
      _collect: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawCheck(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawCheck(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
