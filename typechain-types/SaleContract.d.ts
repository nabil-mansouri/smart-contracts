/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SaleContractInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "balanceCoin()": FunctionFragment;
    "balanceToken(address)": FunctionFragment;
    "canBuyMax()": FunctionFragment;
    "decrease(uint256)": FunctionFragment;
    "generateServiceKey(bytes32,uint256)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hashNative(address,uint256)": FunctionFragment;
    "hashToken(address,uint256,address)": FunctionFragment;
    "historyOf(address)": FunctionFragment;
    "lockCount()": FunctionFragment;
    "locked(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pricing(bytes32)": FunctionFragment;
    "registerWhitelist(address,address,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "saleConfig()": FunctionFragment;
    "saleInfos()": FunctionFragment;
    "saleNative(bytes)": FunctionFragment;
    "saleRemain()": FunctionFragment;
    "saleToken(uint256,address,bytes)": FunctionFragment;
    "saled()": FunctionFragment;
    "seeSponsorship(address)": FunctionFragment;
    "seeSponsorshipCount(address)": FunctionFragment;
    "seeWhitelist(uint256,uint256)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockPayment(bytes32,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelistAdresses(uint256)": FunctionFragment;
    "whitelistCount()": FunctionFragment;
    "whitelistSponsor(address)": FunctionFragment;
    "withdrawCoin()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "canBuyMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decrease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateServiceKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "historyOf", values: [string]): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pricing", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "registerWhitelist",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "saleConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleInfos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleNative",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "saleRemain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleToken",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "saled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seeSponsorship",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "seeSponsorshipCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "seeWhitelist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistAdresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSponsor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canBuyMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decrease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateServiceKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "historyOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pricing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleRemain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seeSponsorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seeSponsorshipCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAdresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserBuyed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserBuyed"): EventFragment;
}

export class SaleContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SaleContractInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceCoin(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    canBuyMax(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "canBuyMax()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decrease(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrease(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        service: string;
        currency: string;
        paymentType: number;
        0: BigNumber;
        1: string;
        2: string;
        3: number;
      };
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    hashNative(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hashNative(address,uint256)"(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hashToken(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hashToken(address,uint256,address)"(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        sales: {
          buyAt: BigNumber;
          amount: BigNumber;
          cost: BigNumber;
          token: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        }[];
        0: {
          buyAt: BigNumber;
          amount: BigNumber;
          cost: BigNumber;
          token: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        }[];
      };
    }>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        sales: {
          buyAt: BigNumber;
          amount: BigNumber;
          cost: BigNumber;
          token: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        }[];
        0: {
          buyAt: BigNumber;
          amount: BigNumber;
          cost: BigNumber;
          token: string;
          0: BigNumber;
          1: BigNumber;
          2: BigNumber;
          3: string;
        }[];
      };
    }>;

    lockCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lockCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    registerWhitelist(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerWhitelist(address,address,uint256,address)"(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    saleConfig(overrides?: CallOverrides): Promise<{
      0: {
        endDate: BigNumber;
        startDate: BigNumber;
        maxPerUser: BigNumber;
        tokenAddress: string;
        tokenPerCoin: BigNumber;
        tokenQuotes: {
          token: string;
          quote: BigNumber;
          0: string;
          1: BigNumber;
        }[];
        validator: string;
        validatorRequire: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
        6: string;
        7: boolean;
      };
    }>;

    "saleConfig()"(overrides?: CallOverrides): Promise<{
      0: {
        endDate: BigNumber;
        startDate: BigNumber;
        maxPerUser: BigNumber;
        tokenAddress: string;
        tokenPerCoin: BigNumber;
        tokenQuotes: {
          token: string;
          quote: BigNumber;
          0: string;
          1: BigNumber;
        }[];
        validator: string;
        validatorRequire: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
        6: string;
        7: boolean;
      };
    }>;

    saleInfos(overrides?: CallOverrides): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        saleMax: BigNumber;
        saleRemain: BigNumber;
        saleCommit: BigNumber;
        countHolders: BigNumber;
        countSale: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
      };
    }>;

    "saleInfos()"(overrides?: CallOverrides): Promise<{
      0: {
        startAt: BigNumber;
        endAt: BigNumber;
        saleMax: BigNumber;
        saleRemain: BigNumber;
        saleCommit: BigNumber;
        countHolders: BigNumber;
        countSale: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
      };
    }>;

    saleNative(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "saleNative(bytes)"(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    saleRemain(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "saleRemain()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    saleToken(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "saleToken(uint256,address,bytes)"(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    saled(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "saled()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    seeSponsorship(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[];
    }>;

    "seeSponsorship(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[];
    }>;

    seeSponsorshipCount(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "seeSponsorshipCount(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seeWhitelist(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[];
    }>;

    "seeWhitelist(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[];
    }>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfig((uint256,uint256,uint256,address,uint256,tuple[],address,bool))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    whitelistAdresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "whitelistAdresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    whitelistCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "whitelistCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    whitelistSponsor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "whitelistSponsor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canBuyMax(overrides?: CallOverrides): Promise<BigNumber>;

  "canBuyMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  decrease(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrease(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  generateServiceKey(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "generateServiceKey(bytes32,uint256)"(
    service: BytesLike,
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "getPrice(bytes32)"(
    service: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashNative(
    sender: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashNative(address,uint256)"(
    sender: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hashToken(
    sender: string,
    _amount: BigNumberish,
    _otherToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashToken(address,uint256,address)"(
    sender: string,
    _amount: BigNumberish,
    _otherToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  historyOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    sales: {
      buyAt: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      token: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }[];
    0: {
      buyAt: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      token: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }[];
  }>;

  "historyOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    sales: {
      buyAt: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      token: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }[];
    0: {
      buyAt: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      token: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }[];
  }>;

  lockCount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  "locked(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    serviceId: BigNumber;
    payer: string;
    unlocked: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: string;
    5: boolean;
  }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  "pricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    service: string;
    currency: string;
    paymentType: number;
    0: BigNumber;
    1: string;
    2: string;
    3: number;
  }>;

  registerWhitelist(
    _buyer: string,
    _token: string,
    _amount: BigNumberish,
    _sponsor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerWhitelist(address,address,uint256,address)"(
    _buyer: string,
    _token: string,
    _amount: BigNumberish,
    _sponsor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  saleConfig(
    overrides?: CallOverrides
  ): Promise<{
    endDate: BigNumber;
    startDate: BigNumber;
    maxPerUser: BigNumber;
    tokenAddress: string;
    tokenPerCoin: BigNumber;
    tokenQuotes: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
    validator: string;
    validatorRequire: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
    6: string;
    7: boolean;
  }>;

  "saleConfig()"(
    overrides?: CallOverrides
  ): Promise<{
    endDate: BigNumber;
    startDate: BigNumber;
    maxPerUser: BigNumber;
    tokenAddress: string;
    tokenPerCoin: BigNumber;
    tokenQuotes: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
    validator: string;
    validatorRequire: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
    6: string;
    7: boolean;
  }>;

  saleInfos(
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    saleMax: BigNumber;
    saleRemain: BigNumber;
    saleCommit: BigNumber;
    countHolders: BigNumber;
    countSale: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  "saleInfos()"(
    overrides?: CallOverrides
  ): Promise<{
    startAt: BigNumber;
    endAt: BigNumber;
    saleMax: BigNumber;
    saleRemain: BigNumber;
    saleCommit: BigNumber;
    countHolders: BigNumber;
    countSale: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
  }>;

  saleNative(
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "saleNative(bytes)"(
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  saleRemain(overrides?: CallOverrides): Promise<BigNumber>;

  "saleRemain()"(overrides?: CallOverrides): Promise<BigNumber>;

  saleToken(
    _amount: BigNumberish,
    _otherToken: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "saleToken(uint256,address,bytes)"(
    _amount: BigNumberish,
    _otherToken: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  saled(overrides?: CallOverrides): Promise<BigNumber>;

  "saled()"(overrides?: CallOverrides): Promise<BigNumber>;

  seeSponsorship(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    {
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }[]
  >;

  "seeSponsorship(address)"(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    {
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }[]
  >;

  seeSponsorshipCount(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "seeSponsorshipCount(address)"(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seeWhitelist(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }[]
  >;

  "seeWhitelist(uint256,uint256)"(
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }[]
  >;

  setConfig(
    config: {
      endDate: BigNumberish;
      startDate: BigNumberish;
      maxPerUser: BigNumberish;
      tokenAddress: string;
      tokenPerCoin: BigNumberish;
      tokenQuotes: { token: string; quote: BigNumberish }[];
      validator: string;
      validatorRequire: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfig((uint256,uint256,uint256,address,uint256,tuple[],address,bool))"(
    config: {
      endDate: BigNumberish;
      startDate: BigNumberish;
      maxPerUser: BigNumberish;
      tokenAddress: string;
      tokenPerCoin: BigNumberish;
      tokenQuotes: { token: string; quote: BigNumberish }[];
      validator: string;
      validatorRequire: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensReceived(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    arg2: string,
    _amount: BigNumberish,
    userData: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockPayment(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockPayment(bytes32,uint256,address)"(
    service: BytesLike,
    serviceId: BigNumberish,
    payer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  whitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    buyer: string;
    token: string;
    amount: BigNumber;
    sponsor: string;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  "whitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    buyer: string;
    token: string;
    amount: BigNumber;
    sponsor: string;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  whitelistAdresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "whitelistAdresses(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  whitelistCount(overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistSponsor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistSponsor(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawCoin(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawCoin()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canBuyMax(overrides?: CallOverrides): Promise<BigNumber>;

    "canBuyMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrease(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decrease(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashNative(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashNative(address,uint256)"(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hashToken(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashToken(address,uint256,address)"(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      sales: {
        buyAt: BigNumber;
        amount: BigNumber;
        cost: BigNumber;
        token: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      }[];
      0: {
        buyAt: BigNumber;
        amount: BigNumber;
        cost: BigNumber;
        token: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      }[];
    }>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      sales: {
        buyAt: BigNumber;
        amount: BigNumber;
        cost: BigNumber;
        token: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      }[];
      0: {
        buyAt: BigNumber;
        amount: BigNumber;
        cost: BigNumber;
        token: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
      }[];
    }>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      serviceId: BigNumber;
      payer: string;
      unlocked: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: string;
      5: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    "pause()"(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      service: string;
      currency: string;
      paymentType: number;
      0: BigNumber;
      1: string;
      2: string;
      3: number;
    }>;

    registerWhitelist(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerWhitelist(address,address,uint256,address)"(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    saleConfig(
      overrides?: CallOverrides
    ): Promise<{
      endDate: BigNumber;
      startDate: BigNumber;
      maxPerUser: BigNumber;
      tokenAddress: string;
      tokenPerCoin: BigNumber;
      tokenQuotes: {
        token: string;
        quote: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      validator: string;
      validatorRequire: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
      6: string;
      7: boolean;
    }>;

    "saleConfig()"(
      overrides?: CallOverrides
    ): Promise<{
      endDate: BigNumber;
      startDate: BigNumber;
      maxPerUser: BigNumber;
      tokenAddress: string;
      tokenPerCoin: BigNumber;
      tokenQuotes: {
        token: string;
        quote: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      validator: string;
      validatorRequire: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: { token: string; quote: BigNumber; 0: string; 1: BigNumber }[];
      6: string;
      7: boolean;
    }>;

    saleInfos(
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      saleMax: BigNumber;
      saleRemain: BigNumber;
      saleCommit: BigNumber;
      countHolders: BigNumber;
      countSale: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    "saleInfos()"(
      overrides?: CallOverrides
    ): Promise<{
      startAt: BigNumber;
      endAt: BigNumber;
      saleMax: BigNumber;
      saleRemain: BigNumber;
      saleCommit: BigNumber;
      countHolders: BigNumber;
      countSale: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
    }>;

    saleNative(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "saleNative(bytes)"(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    saleRemain(overrides?: CallOverrides): Promise<BigNumber>;

    "saleRemain()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleToken(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "saleToken(uint256,address,bytes)"(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    saled(overrides?: CallOverrides): Promise<BigNumber>;

    "saled()"(overrides?: CallOverrides): Promise<BigNumber>;

    seeSponsorship(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[]
    >;

    "seeSponsorship(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[]
    >;

    seeSponsorshipCount(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seeSponsorshipCount(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seeWhitelist(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[]
    >;

    "seeWhitelist(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        buyer: string;
        token: string;
        amount: BigNumber;
        sponsor: string;
        0: string;
        1: string;
        2: BigNumber;
        3: string;
      }[]
    >;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setConfig((uint256,uint256,uint256,address,uint256,tuple[],address,bool))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    "unpause()"(overrides?: CallOverrides): Promise<boolean>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      buyer: string;
      token: string;
      amount: BigNumber;
      sponsor: string;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    whitelistAdresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "whitelistAdresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    whitelistCount(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSponsor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistSponsor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: CallOverrides): Promise<boolean>;

    "withdrawCoin()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;

    UserBuyed(from: null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canBuyMax(overrides?: CallOverrides): Promise<BigNumber>;

    "canBuyMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrease(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "decrease(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(service: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashNative(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashNative(address,uint256)"(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToken(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashToken(address,uint256,address)"(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockCount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricing(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerWhitelist(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerWhitelist(address,address,uint256,address)"(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    saleConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "saleConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleInfos(overrides?: CallOverrides): Promise<BigNumber>;

    "saleInfos()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleNative(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "saleNative(bytes)"(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    saleRemain(overrides?: CallOverrides): Promise<BigNumber>;

    "saleRemain()"(overrides?: CallOverrides): Promise<BigNumber>;

    saleToken(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "saleToken(uint256,address,bytes)"(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    saled(overrides?: CallOverrides): Promise<BigNumber>;

    "saled()"(overrides?: CallOverrides): Promise<BigNumber>;

    seeSponsorship(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seeSponsorship(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seeSponsorshipCount(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seeSponsorshipCount(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seeWhitelist(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seeWhitelist(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfig((uint256,uint256,uint256,address,uint256,tuple[],address,bool))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAdresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistAdresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistCount(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSponsor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistSponsor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCoin(overrides?: Overrides): Promise<BigNumber>;

    "withdrawCoin()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canBuyMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "canBuyMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrease(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrease(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    generateServiceKey(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateServiceKey(bytes32,uint256)"(
      service: BytesLike,
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      service: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashNative(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashNative(address,uint256)"(
      sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToken(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashToken(address,uint256,address)"(
      sender: string,
      _amount: BigNumberish,
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historyOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerWhitelist(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerWhitelist(address,address,uint256,address)"(
      _buyer: string,
      _token: string,
      _amount: BigNumberish,
      _sponsor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    saleConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleInfos()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleNative(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "saleNative(bytes)"(
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    saleRemain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleRemain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleToken(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "saleToken(uint256,address,bytes)"(
      _amount: BigNumberish,
      _otherToken: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    saled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seeSponsorship(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seeSponsorship(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seeSponsorshipCount(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seeSponsorshipCount(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seeWhitelist(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seeWhitelist(uint256,uint256)"(
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfig((uint256,uint256,uint256,address,uint256,tuple[],address,bool))"(
      config: {
        endDate: BigNumberish;
        startDate: BigNumberish;
        maxPerUser: BigNumberish;
        tokenAddress: string;
        tokenPerCoin: BigNumberish;
        tokenQuotes: { token: string; quote: BigNumberish }[];
        validator: string;
        validatorRequire: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      arg2: string,
      _amount: BigNumberish,
      userData: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockPayment(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockPayment(bytes32,uint256,address)"(
      service: BytesLike,
      serviceId: BigNumberish,
      payer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAdresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistAdresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whitelistCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistSponsor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistSponsor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawCoin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
